// Generated by CoffeeScript 1.3.3
(function() {
  var app;

  app = angular.module("4real.directives", []);

  app.directive("bgcolor", [
    function() {
      return {
        scope: false,
        link: function(scope, el, att) {
          var bgColorList, color, r;
          bgColorList = new Array("rgba(143,188,143,.75)", "rgba(102,204,255,.75)", "rgba(194,127,255,.75)", "rgba(200,105,221,.75)", "rgba(255,0,170,.75)", "rgba(90,215,240,.75)", "rgba(112,219,147,.75)");
          r = Math.random(0, 1);
          color = bgColorList[Math.floor(r * bgColorList.length)];
          return el.css({
            "background-color": color
          });
        }
      };
    }
  ]);

  app.directive("glass", [
    '$document', '$window', '$timeout', function($document, $window, $timeout) {
      return {
        link: function(scope, el, att) {
          var rotateScene, updateRotation;
          scope.oldH = .5;
          scope.oldV = .5;
          scope.newH = .5;
          scope.newV = .5;
          rotateScene = function(e) {
            scope.newH = 1 - e.pageX / $window.innerWidth;
            return scope.newV = 1 - e.pageY / $window.innerHeight;
          };
          $document.on('mousemove', rotateScene);
          updateRotation = function() {
            var dx, dy;
            dx = scope.newH - scope.oldH;
            dy = scope.newV - scope.oldV;
            if (Math.abs(dx) > .001) {
              dx *= .1;
            }
            if (Math.abs(dy) > .001) {
              dy *= .1;
            }
            scope.oldH += dx;
            scope.oldV += dy;
            el.css({
              "-webkit-transform": "rotateX(" + (7 - (scope.oldV * 14)) + "deg) rotateY(" + (-10 + (scope.oldH * 20)) + "deg)"
            });
            el.find("specular").css({
              "background-position": (-200 + (scope.oldH * -500)) + "px " + (-scope.oldV * 600) + "px",
              opacity: 1 - (scope.oldH * .45) - (scope.oldV * .45)
            });
            el.find("shadow").css({
              "-webkit-transform": "rotateX(" + (65 + (scope.oldV * 20)) + "deg) rotateY(" + (10 - (scope.oldH * 20)) + "deg) skewX(-15deg)"
            });
            return $timeout(updateRotation, 30);
          };
          return updateRotation();
        }
      };
    }
  ]);

  app.directive("graph", [
    function() {
      return {
        link: function(scope, el, att) {
          var gx, gy, height, line, margin, maximum, minimum, path, svg, tooltip, width, x, xAxis, y, yAxis;
          margin = [80, 80, 80, 80];
          width = 1000 - margin[1] - margin[3];
          height = 600 - margin[0] - margin[2];
          svg = d3.select("#chart").append("svg").attr("width", width + margin[3] + margin[1]).attr("height", height + margin[0] + margin[2]).append("svg:g").attr("transform", "translate(" + margin[3] + "," + margin[0] + ")");
          x = d3.time.scale().range([0, width]);
          y = d3.scale.linear().range([height, 0]);
          xAxis = d3.svg.axis().scale(x).orient("bottom");
          yAxis = d3.svg.axis().scale(y).orient("left");
          tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);
          line = d3.svg.line().x(function(d) {
            return x(new Date(d.date * 1000));
          }).y(function(d) {
            return y(d.price);
          });
          x.domain(d3.extent(scope.history.map(function(d) {
            return new Date(d.date * 1000);
          })));
          maximum = d3.max(scope.history.map(function(d) {
            return d.price;
          }));
          minimum = d3.min(scope.history.map(function(d) {
            return d.price;
          }));
          y.domain([parseInt(minimum) - 5, parseInt(maximum) + 5]);
          path = svg.append("g").attr("clip-path", "url(#clip)").append("path");
          gx = svg.append("svg:g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
          gy = svg.append("svg:g").attr("class", "y axis").attr("transform", "translate(0,0)").call(yAxis);
          return scope.$watch('history', function(newV, oldV) {
            if (newV !== oldV) {
              x.domain(d3.extent(scope.history.map(function(d) {
                return new Date(d.date * 1000);
              })));
              maximum = d3.max(scope.history.map(function(d) {
                return d.price;
              }));
              minimum = d3.min(scope.history.map(function(d) {
                return d.price;
              }));
              y.domain([parseInt(minimum) - 5, parseInt(maximum) + 5]);
              gx.call(xAxis);
              gy.call(yAxis);
              path.datum(scope.history).attr("d", line);
              return svg.selectAll("circle").data(scope.history).enter().append("circle").attr("r", 3).attr("cx", function(d) {
                var cx;
                cx = x(new Date(d.date * 1000));
                return cx;
              }).attr("cy", function(d) {
                return y(d.price);
              }).on("mouseover", function(d) {
                tooltip.transition().duration(200).style("opacity", 0.9);
                return tooltip.html(d.price).style("left", d3.event.pageX + "px").style("top", (d3.event.pageY - 28) + "px");
              }).on("mouseout", function(d) {
                return tooltip.transition().duration(500).style("opacity", 0);
              });
            }
          });
        }
      };
    }
  ]);

  app.directive("projects", [
    function() {
      return {
        link: function(scope, el, att) {}
      };
    }
  ]);

  app.directive("water", [
    function() {
      return {
        link: function(scope, el, att) {}
      };
    }
  ]);

}).call(this);
